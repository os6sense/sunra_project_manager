- model_class = Project

.page-header
  %h1= t '.title', :default => model_class.model_name.human.pluralize

%table{:class => "table table-striped"}
  %thead
    %tr
      %th= model_class.human_attribute_name(:client_name)
      %th= model_class.human_attribute_name(:project_name)
      %th Booking Date
      %th Start Time
      %th End Time
      %th Studio
      %th= t '.actions', :default => t("helpers.actions")
  %tbody
    -@projects.each do |project|
      %tr
        %td= link_to project.client_name, polymorphic_path(project)
        %td= link_to project.project_name, polymorphic_path(project)

        = render :tempate => "bookings/index", :locals => {:no_header => true}

        -project.bookings.each do |booking|
          - booking_detail = capture do
            %td= booking.date
            %td= booking.start_time.strftime "%H:%M"
            %td= booking.end_time.strftime "%H:%M"
            %td= StudioLookup.find(booking.facility_studio).studio_name


          -# we want to compact projects so that the booking details
          -# appear alongside the project but we dont want to repeat
          -# the project name.
          -if booking != project.bookings.first
            %tr
              %td
              %td
              =booking_detail
              %td
          -else
            =booking_detail
            %td
              = render :partial  => 'layouts/rec_form_actions',
                :locals => {:t_class => "project", :path => [project]}
        -# If we have a project without any bookings we want to provide 
        -# controls
        - if project.bookings.size == 0
          - (1..4).each do
            %td
          %td
            = render :partial  => 'layouts/rec_form_actions',
              :locals => {:t_class => "project", :path => [project]}

=will_paginate(@projects, :style => "color:blue;float:right;")
=link_to t('.new', :default => t("helpers.links.new_project")),
            new_project_path, :class => 'btn btn-success'



